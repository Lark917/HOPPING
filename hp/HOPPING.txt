1. 项目概述​​

构建​​纯本地运行​​的玻璃拟态工作台，集成五大模块，通过后端代理保障AI模块安全，实现响应式布局（≤768px切换移动模式）。

​​2. 核心调整点​​

所有数据使用浏览器 ​​IndexedDB​​ 本地存储（无云端同步）

日历高亮显示起止日期范围（不显示项目名）

AI请求通过 ​​Express后端代理​​（隐藏API Key）

移动端≤768px时右侧边栏转为底部折叠工具栏

​​3. 技术规格​​

​​▨ 前端关键实现​​

// 本地存储方案（IndexedDB封装）
import { openDB } from 'idb';
const db = await openDB('WorkbenchDB', 1, {
  upgrade(db) {
    db.createObjectStore('tasks', { keyPath: 'id' });
    db.createObjectStore('projects', { keyPath: 'id' });
  }
});

// 日历高亮逻辑（Project模块）
highlightCalendarRange(startDate, endDate) {
  calendarEl.querySelectorAll('.fc-day').forEach(day => {
    const date = day.dataset.date;
    if (date >= startDate && date <= endDate) {
      day.classList.add('bg-blue-100/20'); // 半透明高亮
    }
  });
}
​​▨ 后端代理方案（Node.js）​​

// server.js (安全代理Kimi API)
app.post('/proxy/ai-chat', async (req, res) => {
  const response = await fetch('https://api.moonshot.cn/v1/chat/completions', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${process.env.KIMI_API_KEY}` // 从环境变量读取
    },
    body: JSON.stringify(req.body)
  });
  res.json(await response.json());
});
​​▨ 响应式布局规则​​

/* 桌面端（>768px） */
.sidebar { 
  position: fixed; 
  right: 0; 
  width: 300px;
}

/* 移动端（≤768px） */
@media (max-width: 768px) {
  .sidebar {
    bottom: 0;
    width: 100%;
    height: 60px; /* 折叠态高度 */
    transition: height 0.3s;
  }
  .sidebar.expanded {
    height: 70vh; /* 展开高度 */
  }
}
​​4. 开发步骤优化​​

​​环境搭建​​

前端：vue create workbench+ 安装Tailwind CSS（配置玻璃拟态工具类）

后端：npm init+ 安装express/dotenv（创建.env存储API Key）

​​核心模块开发顺序​​

graph TD
  A[主框架布局] --> B[本地存储系统]
  B --> C(Task模块)
  B --> D(Project模块)
  D --> E[日历联动]
  B --> F(Notepad模块)
  B --> G(Clock模块)
  G --> H[番茄钟动画]
  B --> I(AI模块)
  I --> J[后端代理]










​​关键动效实现​​

​​番茄钟粒子动画​​：使用Canvas绘制

function createParticles(x, y) {
  for(let i=0; i<50; i++) {
    const particle = document.createElement('div');
    particle.style = `left:${x}px; top:${y}px; 
                      background: radial-gradient(#4ade80, transparent)`;
    // GSAP动画实现扩散效果...
  }
}
​​5. 技术栈最终确认​​

分类

技术选型

前端框架

Vue 3 + Composition API

状态管理

Pinia (管理模块间共享数据)

UI框架

Tailwind CSS + 自定义玻璃拟态类（示例：.glass-card { @apply backdrop-blur-md bg-white/20 }）

本地数据库

IndexedDB (通过idb库封装)

后端

Express.js (仅用于API代理)

关键库

Tiptap(富文本)、FullCalendar(日历)、GSAP(动画)、Chart.js(进度图)

​​安全与性能特别说明​​
​​API Key保护​​

永远不要在前端硬编码API Key

后端使用dotenv加载环境变量（.gitignore排除.env文件）

部署时配置服务器环境变量

​​本地存储优化​​

// 自动清理30天前的笔记
setInterval(() => {
  const notes = await db.getAll('notes');
  const expired = notes.filter(n => Date.now() - n.time > 30 * 86400000);
  expired.forEach(n => db.delete('notes', n.id));
}, 86400000); // 每天清理一次
​​移动端降级策略​​

/* 低性能设备禁用模糊效果 */
@media (prefers-reduced-motion: reduce), (hover: none) {
  .glass-card {
    backdrop-filter: none !important;
    background: rgba(255,255,255,0.9) !important;
  }
}
